package com.xiaoaitouch.mom.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoaitouch.mom.dao.HoroscopeModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HOROSCOPE_MODEL.
*/
public class HoroscopeModelDao extends AbstractDao<HoroscopeModel, Long> {

    public static final String TABLENAME = "HOROSCOPE_MODEL";

    /**
     * Properties of entity HoroscopeModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Message = new Property(1, String.class, "message", false, "MESSAGE");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Stars = new Property(3, Integer.class, "stars", false, "STARS");
        public final static Property UserId = new Property(4, Long.class, "userId", false, "USER_ID");
        public final static Property CardType = new Property(5, Integer.class, "cardType", false, "CARD_TYPE");
        public final static Property DueDays = new Property(6, Integer.class, "dueDays", false, "DUE_DAYS");
        public final static Property Horoscope = new Property(7, Integer.class, "horoscope", false, "HOROSCOPE");
        public final static Property DescTime = new Property(8, Long.class, "descTime", false, "DESC_TIME");
    };


    public HoroscopeModelDao(DaoConfig config) {
        super(config);
    }
    
    public HoroscopeModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HOROSCOPE_MODEL' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'MESSAGE' TEXT," + // 1: message
                "'DATE' TEXT," + // 2: date
                "'STARS' INTEGER," + // 3: stars
                "'USER_ID' INTEGER," + // 4: userId
                "'CARD_TYPE' INTEGER," + // 5: cardType
                "'DUE_DAYS' INTEGER," + // 6: dueDays
                "'HOROSCOPE' INTEGER," + // 7: horoscope
                "'DESC_TIME' INTEGER);"); // 8: descTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HOROSCOPE_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HoroscopeModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        Integer stars = entity.getStars();
        if (stars != null) {
            stmt.bindLong(4, stars);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
 
        Integer cardType = entity.getCardType();
        if (cardType != null) {
            stmt.bindLong(6, cardType);
        }
 
        Integer dueDays = entity.getDueDays();
        if (dueDays != null) {
            stmt.bindLong(7, dueDays);
        }
 
        Integer horoscope = entity.getHoroscope();
        if (horoscope != null) {
            stmt.bindLong(8, horoscope);
        }
 
        Long descTime = entity.getDescTime();
        if (descTime != null) {
            stmt.bindLong(9, descTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HoroscopeModel readEntity(Cursor cursor, int offset) {
        HoroscopeModel entity = new HoroscopeModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // stars
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // cardType
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // dueDays
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // horoscope
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // descTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HoroscopeModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStars(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCardType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDueDays(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHoroscope(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDescTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HoroscopeModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HoroscopeModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
