package com.xiaoaitouch.mom.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoaitouch.mom.dao.ShareCardModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SHARE_CARD_MODEL.
*/
public class ShareCardModelDao extends AbstractDao<ShareCardModel, Long> {

    public static final String TABLENAME = "SHARE_CARD_MODEL";

    /**
     * Properties of entity ShareCardModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Message = new Property(1, String.class, "message", false, "MESSAGE");
        public final static Property Img = new Property(2, String.class, "img", false, "IMG");
        public final static Property Location = new Property(3, String.class, "location", false, "LOCATION");
        public final static Property Feeling = new Property(4, String.class, "feeling", false, "FEELING");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
        public final static Property Lat = new Property(6, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(7, Double.class, "lng", false, "LNG");
        public final static Property UserId = new Property(8, Long.class, "userId", false, "USER_ID");
        public final static Property CardType = new Property(9, Integer.class, "cardType", false, "CARD_TYPE");
        public final static Property Date = new Property(10, String.class, "date", false, "DATE");
        public final static Property DueDays = new Property(11, Integer.class, "dueDays", false, "DUE_DAYS");
        public final static Property CreateTime = new Property(12, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property DescTime = new Property(13, Long.class, "descTime", false, "DESC_TIME");
        public final static Property CardId = new Property(14, Long.class, "cardId", false, "CARD_ID");
    };


    public ShareCardModelDao(DaoConfig config) {
        super(config);
    }
    
    public ShareCardModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SHARE_CARD_MODEL' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'MESSAGE' TEXT," + // 1: message
                "'IMG' TEXT," + // 2: img
                "'LOCATION' TEXT," + // 3: location
                "'FEELING' TEXT," + // 4: feeling
                "'TYPE' INTEGER," + // 5: type
                "'LAT' REAL," + // 6: lat
                "'LNG' REAL," + // 7: lng
                "'USER_ID' INTEGER," + // 8: userId
                "'CARD_TYPE' INTEGER," + // 9: cardType
                "'DATE' TEXT," + // 10: date
                "'DUE_DAYS' INTEGER," + // 11: dueDays
                "'CREATE_TIME' INTEGER," + // 12: createTime
                "'DESC_TIME' INTEGER," + // 13: descTime
                "'CARD_ID' INTEGER);"); // 14: cardId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SHARE_CARD_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShareCardModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        String feeling = entity.getFeeling();
        if (feeling != null) {
            stmt.bindString(5, feeling);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(7, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(8, lng);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(9, userId);
        }
 
        Integer cardType = entity.getCardType();
        if (cardType != null) {
            stmt.bindLong(10, cardType);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(11, date);
        }
 
        Integer dueDays = entity.getDueDays();
        if (dueDays != null) {
            stmt.bindLong(12, dueDays);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(13, createTime);
        }
 
        Long descTime = entity.getDescTime();
        if (descTime != null) {
            stmt.bindLong(14, descTime);
        }
 
        Long cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindLong(15, cardId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShareCardModel readEntity(Cursor cursor, int offset) {
        ShareCardModel entity = new ShareCardModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // img
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // location
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // feeling
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // lat
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // lng
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // userId
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // cardType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // date
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // dueDays
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // createTime
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // descTime
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // cardId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShareCardModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFeeling(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLat(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setLng(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setUserId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCardType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDueDays(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCreateTime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setDescTime(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setCardId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ShareCardModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ShareCardModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
