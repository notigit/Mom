package com.xiaoaitouch.mom.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoaitouch.mom.dao.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_INFO.
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Age = new Property(2, String.class, "age", false, "AGE");
        public final static Property Height = new Property(3, String.class, "height", false, "HEIGHT");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property DueTime = new Property(5, String.class, "dueTime", false, "DUE_TIME");
        public final static Property Weight = new Property(6, Double.class, "weight", false, "WEIGHT");
        public final static Property MensesCircle = new Property(7, Integer.class, "mensesCircle", false, "MENSES_CIRCLE");
        public final static Property LastMensesTime = new Property(8, String.class, "lastMensesTime", false, "LAST_MENSES_TIME");
        public final static Property CreateTime = new Property(9, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Uniqueness = new Property(10, String.class, "uniqueness", false, "UNIQUENESS");
        public final static Property Account = new Property(11, String.class, "account", false, "ACCOUNT");
        public final static Property Pwd = new Property(12, String.class, "pwd", false, "PWD");
        public final static Property HeadPic = new Property(13, String.class, "headPic", false, "HEAD_PIC");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFO' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' INTEGER," + // 1: userId
                "'AGE' TEXT," + // 2: age
                "'HEIGHT' TEXT," + // 3: height
                "'NICK_NAME' TEXT," + // 4: nickName
                "'DUE_TIME' TEXT," + // 5: dueTime
                "'WEIGHT' REAL," + // 6: weight
                "'MENSES_CIRCLE' INTEGER," + // 7: mensesCircle
                "'LAST_MENSES_TIME' TEXT," + // 8: lastMensesTime
                "'CREATE_TIME' TEXT," + // 9: createTime
                "'UNIQUENESS' TEXT," + // 10: uniqueness
                "'ACCOUNT' TEXT," + // 11: account
                "'PWD' TEXT," + // 12: pwd
                "'HEAD_PIC' TEXT);"); // 13: headPic
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(3, age);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(4, height);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String dueTime = entity.getDueTime();
        if (dueTime != null) {
            stmt.bindString(6, dueTime);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(7, weight);
        }
 
        Integer mensesCircle = entity.getMensesCircle();
        if (mensesCircle != null) {
            stmt.bindLong(8, mensesCircle);
        }
 
        String lastMensesTime = entity.getLastMensesTime();
        if (lastMensesTime != null) {
            stmt.bindString(9, lastMensesTime);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
 
        String uniqueness = entity.getUniqueness();
        if (uniqueness != null) {
            stmt.bindString(11, uniqueness);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(12, account);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(13, pwd);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(14, headPic);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dueTime
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // weight
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // mensesCircle
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lastMensesTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // uniqueness
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // account
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pwd
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // headPic
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeight(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDueTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeight(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setMensesCircle(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLastMensesTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUniqueness(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAccount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPwd(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHeadPic(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
